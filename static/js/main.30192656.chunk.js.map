{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["SystemProgram","web3","arr","Keypair","Object","values","kp","_keypair","secretKey","secret","Uint8Array","baseAccount","fromSecretKey","programID","PublicKey","idl","metadata","address","network","clusterApiUrl","opts","TWITTER_HANDLE","TWITTER_LINK","TEST_GIFS","App","useState","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","checkIfWalletIsConnected","a","window","solana","isPhantom","console","log","connect","onlyIfTrusted","response","publicKey","toString","alert","error","connectWallet","getProvider","connection","Connection","Provider","createGifAccount","provider","program","Program","rpc","initialize","accounts","user","wallet","systemProgram","programId","signers","getGifList","account","fetch","onInputChange","event","value","target","sendGif","length","addGif","useEffect","addEventListener","className","onClick","type","placeholder","onChange","map","item","index","src","gifLink","alt","twitterLogo","href","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.30192656.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.d89d9a86.svg\";","import { useEffect, useState } from 'react';\nimport { Connection, PublicKey, clusterApiUrl} from '@solana/web3.js';\nimport {\n  Program, Provider, web3\n} from '@project-serum/anchor';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport './App.css';\nimport idl from './idl.json';\nimport kp from './keypair.json'\n\n// SystemProgram is a reference to the Solana runtime!\nconst { SystemProgram, Keypair } = web3;\n\n// Load keypair from file system\nconst arr = Object.values(kp._keypair.secretKey)\nconst secret = new Uint8Array(arr)\nconst baseAccount = web3.Keypair.fromSecretKey(secret)\n\n// Get our program's id form the IDL file.\nconst programID = new PublicKey(idl.metadata.address);\n\n// Set our network to devent.\nconst network = clusterApiUrl('devnet');\n\n// Control's how we want to acknowledge when a trasnaction is \"done\".\nconst opts = {\n  preflightCommitment: \"processed\"\n}\n\n// Constants\nconst TWITTER_HANDLE = 'simonlee.dev';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst TEST_GIFS = [\n\t'https://i.giphy.com/media/eIG0HfouRQJQr1wBzz/giphy.webp',\n\t'https://media3.giphy.com/media/L71a8LW2UrKwPaWNYM/giphy.gif?cid=ecf05e47rr9qizx2msjucl1xyvuu47d7kf25tqt2lvo024uo&rid=giphy.gif&ct=g',\n\t'https://media4.giphy.com/media/AeFmQjHMtEySooOc8K/giphy.gif?cid=ecf05e47qdzhdma2y3ugn32lkgi972z9mpfzocjj6z1ro4ec&rid=giphy.gif&ct=g',\n\t'https://i.giphy.com/media/PAqjdPkJLDsmBRSYUp/giphy.webp'\n]\n\nconst App = () => {\n  // State\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n  const [gifList, setGifList] = useState([]);\n\n  // Actions\n  const checkIfWalletIsConnected = async () => {\n    try {\n      // grab solana object from window, injected by Phantom wallet browser extension\n      const { solana } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log('Phantom wallet found!');\n\n          /*\n          * The solana object gives us a function that will allow us to connect\n          * directly with the user's wallet!\n          */\n          const response = await solana.connect({ onlyIfTrusted: true });\n          console.log(\n            'Connected with Public Key:',\n            response.publicKey.toString()\n          );\n\n          // Save user's wallet address\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert('Solana object not found! Get a Phantom Wallet ðŸ‘»');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  /*\n   * Let's define this method so our code doesn't break.\n   * We will write the logic for this next!\n   */\n  const connectWallet = async () => {\n    const { solana } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log('Connected with Public Key:', response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(\n      connection, window.solana, opts.preflightCommitment,\n    );\n    return provider;\n  }\n\n  const createGifAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      console.log(\"ping\")\n      await program.rpc.initialize({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [baseAccount]\n      });\n      console.log(\"Created a new BaseAccount w/ address:\", baseAccount.publicKey.toString())\n      await getGifList();\n  \n    } catch(error) {\n      console.log(\"Error creating BaseAccount account:\", error)\n    }\n  }\n\n  const getGifList = async() => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n      \n      console.log(\"Got the account\", account)\n      setGifList(account.gifList)\n  \n    } catch (error) {\n      console.log(\"Error in getGifs: \", error)\n      setGifList(null);\n    }\n  }\n\n  const onInputChange = (event) => {\n    const { value } = event.target;\n    setInputValue(value);\n  };\n\n  const sendGif = async () => {\n    if (inputValue.length === 0) {\n      console.log(\"No gif link given!\")\n      return\n    }\n\n    console.log('Gif link:', inputValue);\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n  \n      await program.rpc.addGif(inputValue, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n        },\n      });\n      console.log(\"GIF sucesfully sent to program\", inputValue)\n  \n      await getGifList();\n    } catch (error) {\n      console.log(\"Error sending GIF:\", error)\n    }\n  };\n\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  const renderConnectedContainer = () => {\n    if (gifList === null) {\n      return (\n        <div className=\"connected-container\">\n          <button className=\"cta-button submit-gif-button\" onClick={createGifAccount}>\n            Do One-Time Initialization For GIF Program Account\n          </button>\n        </div>\n      )\n    } \n    // Otherwise, we're good! Account exists. User can submit GIFs.\n    else {\n      return(\n        <div className=\"connected-container\">\n          <input\n            type=\"text\"\n            placeholder=\"Enter gif link!\"\n            value={inputValue}\n            onChange={onInputChange}\n          />\n          <button className=\"cta-button submit-gif-button\" onClick={sendGif}>\n            Submit\n          </button>\n          <div className=\"gif-grid\">\n            {/* We use index as the key instead, also, the src is now item.gifLink */}\n            {gifList.map((item, index) => (\n              <div className=\"gif-item\" key={index}>\n                <img src={item.gifLink} />\n              </div>\n            ))}\n          </div>\n        </div>\n      )\n    }\n  };\n\n  // UseEffects\n  useEffect(() => {\n    window.addEventListener('load', async (event) => {\n      await checkIfWalletIsConnected();\n    });\n  }, []);\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log('Fetching GIF list...');\n      \n      // Call Solana program here.\n  \n      // Set state\n      setGifList(TEST_GIFS);\n    }\n  }, [walletAddress]);\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log('Fetching GIF list...');\n      getGifList()\n    }\n  }, [walletAddress]);\n\n  return (\n    <div className=\"App\">\n      <div className={walletAddress ? 'authed-container': 'container'}>\n        <div className=\"header-container\">\n          <p className=\"header\">ðŸ–¼ Collages Portal</p>\n          <p className=\"sub-text\">\n            View your collages in the metaverse âœ¨\n          </p>\n          {!walletAddress && renderNotConnectedContainer()}\n          {walletAddress && renderConnectedContainer()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built by @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}